esphome:
  name: espac
  friendly_name: ESPAC - Smart wifi thermostat

esp32:
  board: esp32dev
  framework:
    type: arduino

api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

# Enable logging
logger:
  tx_buffer_size: 1024
  level: DEBUG
  logs:
    sensor: ERROR
    component: ERROR
    switch: ERROR
    select: ERROR
    esp32.preferences: ERROR

substitutions:
  ambient_sensor: internal_temp # or internal_temp if no ext sensor
  ext_sensor:  null.null # or sensor.my_ext_temp_sensor for home assistant sensor
  hide_ext_sensor: true  # hide / show external sensor
  hide_debug: true 
  hide_hyst: false #show or hide hysteresis controls

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "ESPAC"
    password: "12345678"
captive_portal:
  
# Activate web interface
web_server:
  port: 80
  version: 3
  log: true
  ota: False

uart:
  id: ser1
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 9600
  rx_buffer_size: 1024
  debug:
    direction: BOTH
    dummy_receiver: true
    sequence:
    - lambda: |-
        if (direction == UART_DIRECTION_RX) {
          if (bytes.size() >= 34) {
            id(internal_temp).publish_state(bytes[10]);
            if(id(dsync).state == 1) return;

            id(ac_state).publish_state(bytes[13]); 
            id(fan_state).publish_state(bytes[13]);
            if(id(ctemp_state).state == 0) id(ctemp_state).publish_state(bytes[14]);
            id(oscv_state).publish_state(bytes[15]);
            id(osch_state).publish_state(bytes[15]);
            id(unit_state).publish_state(bytes[16]);
            switch((int)bytes[16]){ //bad but should work
              case 4:
                if(id(screen_sw).state) id(screen_sw).turn_off();
                if(id(clean_sw).state) id(clean_sw).turn_off();
                break;
              case 68:
                if(!id(clean_sw).state) id(clean_sw).turn_on();
                if(id(screen_sw).state) id(screen_sw).turn_off();
                break;
              case 136:
                if(!id(screen_sw).state) id(screen_sw).turn_on();
                if(id(clean_sw).state) id(clean_sw).turn_off();
                break;
              case 200:
                if(!id(screen_sw).state) id(screen_sw).turn_on();
                if(!id(clean_sw).state) id(clean_sw).turn_on();
                break;
            }
            if((((int)bytes[15] & 0xF0)/16)==1){
              if(!id(swing_horizontal).state) id(swing_horizontal).turn_on();
            }
            id(reset_thermostat).execute(); //set default to fan_only mode on boot
            id(apply).turn_off();
            id(dsync).publish_state(1);
            id(LED).publish_state(true);
          }
        }

time:
  - platform: sntp
    id: refresh_thermostat
    on_time: 
      - seconds: /30
        then:
          - lambda: id(external_temp).publish_state(id(external_temp).state);

  - platform: sntp
    id: idletooff
    on_time: 
      - seconds: /10
        then:
          - lambda: |-
              if(id(dsync).state == 0 || id(tsidle).state == 0) return;
              if(id(esp_thermostat).action != 4){ // not idle mode so abort timely auto off
                id(tsidle).publish_state(0);
                return;
              }
              time_t timestamp = ::time(&timestamp);
              if(timestamp-id(tsidle).state > id(fanidletimer).state){ // more than 2400s idle set to off, should put fan off until next action event
                auto call_mode = id(ac_mode_consigne).make_call();
                call_mode.set_option("Off");
                call_mode.perform();
                id(tsidle).publish_state(0);
                id(writecommand).publish_state(0);
              }
          - script.execute:
              id: set_temp_regulation

script:
  - id: set_temp_regulation
    mode: single
    then:
      - lambda: |-
          if(id(dsync).state == 0) return;
          auto index = id(ac_mode_consigne).active_index(); 
          int mode = index.value(); //@todo replace mode with action
          int low = id(esp_thermostat).target_temperature_low;
          int high = id(esp_thermostat).target_temperature_high;
          int tamb = id(internal_temp).state; // used primary or for ac driver correction
          int tambext = id(external_temp).state;

          int settemp = (low+high)/2; //default target : between low and high setpoint
          int newtemp = 0;
          if(mode == 4){//heat //@todo replace mode with action - heat action 4
            settemp = low;
            if(tamb-tambext >= 3){//increase setpoint to prevent shutdown from wrong internal sensing, only with external sensor
              newtemp = tamb-3;
              if(newtemp > settemp) settemp = newtemp; 
            }
          }
          if(mode == 1){//cool
            settemp = high;
            if(tambext-tamb >= 3){
              newtemp = tamb+2;
              if(newtemp < settemp) settemp = newtemp;
            }
          }

          settemp-=16;
          if(id(ctemp_state).state!=settemp){
            id(ctemp_state).publish_state(settemp);
            id(writecommand).publish_state(0);
          }
          
  - id: reset_thermostat
    mode: single
    then:
     - climate.control: 
          id: esp_thermostat
          mode: FAN_ONLY
          fan_mode: LOW
      

text_sensor:

climate:
  - platform: thermostat
    visual:
      min_temperature: 16
      max_temperature: 34
      temperature_step: 
        current_temperature: 0.1
        target_temperature: 0.5
    id: esp_thermostat
    name: "Thermostat"
    icon: mdi:thermometer
    sensor: ${ambient_sensor} 
    min_cooling_off_time: 300s
    min_cooling_run_time: 300s
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_fanning_off_time: 3s
    min_fanning_run_time: 5s
    min_fan_mode_switching_time: 5s
    min_idle_time: 5s
    set_point_minimum_differential: 2
    cool_deadband : 0.1 # start 0.1° above cool setpoint 
    cool_overrun : 0.5 #stop 1° below cool setpoint
    heat_deadband : 0.3 #begin to heat before reaching low set point 
    heat_overrun : 0.2 #6 for internal temp #because of misplaced temp sensor, overrun to 6 to prevent start and stop. have to implement overrrun fan / swing action to counter that effect
    setup_priority: 300
    startup_delay: true

    target_temperature_change_action:
      then:
        - script.execute:
            id: set_temp_regulation
    off_mode:
      - select.set_index: 
          id: ac_mode_consigne
          index: 5
      - switch.turn_on: apply

    # auto_mode:
    #   - select.set_index: 
    #       id: ac_mode_consigne
    #       index: 0
    #   - switch.turn_on: apply
    # heat_mode:
    # cool_mode:
    # fan_only_mode:
    # dry_mode:
    
    fan_mode_high_action: 
      then:
        - select.set_index: 
            id: fan_speed_consigne
            index: 5
        - switch.turn_on: apply
    fan_mode_medium_action:
      then:
        - select.set_index: 
            id: fan_speed_consigne
            index: 4
        - switch.turn_on: apply
    fan_mode_middle_action:
      then:
        - select.set_index: 
            id: fan_speed_consigne
            index: 3
        - switch.turn_on: apply
    fan_mode_low_action:
      then:
        - select.set_index: 
            id: fan_speed_consigne
            index: 2
        - switch.turn_on: apply
    fan_mode_quiet_action:
        - select.set_index: 
            id: fan_speed_consigne
            index: 1
        - switch.turn_on: apply

    swing_off_action: 
      then:
        - select.set_index: 
            id: swing_vertical
            index: 0
        - switch.turn_on: apply
    swing_vertical_action:
      then:
        - select.set_index: 
            id: swing_vertical
            index: 1
        - switch.turn_on: apply

    cool_action:
      - select.set_index: 
          id: ac_mode_consigne
          index: 1
      - select.set_index: 
          id: fan_speed_consigne
          index: 3
      - select.set_index:
          id: swing_vertical
          index: 4
      - switch.turn_on: apply

    heat_action:
      - select.set_index: 
          id: ac_mode_consigne
          index: 4
      - select.set_index: 
          id: fan_speed_consigne
          index: 3
      - select.set_index:
          id: swing_vertical
          index: 2
      - switch.turn_on: apply

    idle_action:
      - lambda: |-
          int mode = id(esp_thermostat).mode;
          if(mode == 0){//OFF MODE, stop unit
            auto call_mode = id(ac_mode_consigne).make_call();
            call_mode.set_option("Off");
            call_mode.perform();
            id(tsidle).publish_state(0);
          } else {//from heat or cool
            auto call_mode = id(ac_mode_consigne).make_call();
            call_mode.set_option("Fan Only");
            call_mode.perform();
            time_t timestamp = ::time(&timestamp);
            id(tsidle).publish_state(timestamp);
          }
      - select.set_index: 
          id: fan_speed_consigne
          index: 2
      - select.set_index:
          id: swing_vertical
          index: 2
      - switch.turn_on: apply

    dry_action :
      - select.set_index: 
          id: ac_mode_consigne
          index: 2
      - select.set_index: 
          id: fan_speed_consigne
          index: 1
      - switch.turn_on: apply
    fan_only_action : 
      - select.set_index: 
          id: ac_mode_consigne
          index: 3
      - select.set_index: 
          id: fan_speed_consigne
          index: 2
      - select.set_index:
          id: swing_vertical
          index: 2
      - switch.turn_on: apply
    default_preset: Auto
    preset:
      - name: Auto
        default_target_temperature_low: 20 °C
        default_target_temperature_high: 22 °C
        mode: HEAT_COOL
      - name: eco
        default_target_temperature_low: 18 °C
        default_target_temperature_high: 25 °C
        mode: HEAT_COOL
      - name: comfort
        default_target_temperature_low: 22 °C
        default_target_temperature_high: 25 °C
        mode: HEAT
      - name: sleep
        default_target_temperature_low: 17 °C
        default_target_temperature_high: 20 °C
        fan_mode: QUIET
        

sensor:
  - platform: wifi_signal
    name: "WiFi puissance"
    update_interval: 15s

  - platform: uptime
    name: "up"
    id: uptime_sec

  - platform: template
    id: writecommand
    internal: true
    on_value:
      - uart.write: !lambda |-
          if(id(dsync).state == 0) return {};
          if((int)id(ctemp_state).state == 0) return {};
          if((int)id(internal_temp).state == 0) return {};
          if((int)id(unit_state).state == 0) return {};
          std::vector< uint8_t > payload = {0x7A,0x7A,0x21,0xD5,0x18,0x00,0x00,0xA1,0x00,0x00,0x00,0x00};
          payload.push_back((int)id(ac_state).state | (int)id(fan_state).state);
          payload.push_back(id(ctemp_state).state);
          payload.push_back((int)id(osch_state).state | (int)id(oscv_state).state);
          payload.push_back(id(unit_state).state);
          payload.push_back(id(volume_state).state);
          payload.push_back(0x00); 
          payload.push_back(0x00);
          payload.push_back(0x00);
          payload.push_back(0x00);
          payload.push_back(0x00);
          int crc = crc16(payload.data(),payload.size());
          payload.insert(payload.end(), {(crc >> 8) & 0xFF, crc & 0xFF});
          return payload;
      - switch.turn_on: LED

  - platform: homeassistant
    name: "Ambient Temp ext."
    id: external_temp
    internal: ${hide_ext_sensor}
    entity_id: ${ext_sensor}
    icon: mdi:thermometer
    accuracy_decimals: 1
    device_class: temperature
    unit_of_measurement: "°C"

  - platform: template
    id: ac_state
    internal: ${hide_debug}
    accuracy_decimals: 0
    filters:
     - lambda: |-
        std::string mode[6]={"Auto","Cool","Dry","Fan Only","Heat","Off"};
        int data = ((int)x & 0x0F);
        int state = ((int)data & ~(1 << 3));
        if(id(ac_mode_consigne).active_index() != state){
          auto call = id(ac_mode_consigne).make_call();
          call.set_option(mode[state]);
          call.perform();
        }
        return data;

  - platform: template
    id: fan_state
    internal: ${hide_debug}
    accuracy_decimals: 0
    filters:
     - lambda: |-
        std::string mode[14]={"No step","Very low","Low","Medium","High","Very high","Hum based","","","","","","","Turbo"};
        int state = ((int)x & 0xF0);
        if(id(fan_speed_consigne).active_index() != (state/16)){
          auto call = id(fan_speed_consigne).make_call();
          call.set_option(mode[state/16]);
          call.perform();
        }
        return state;

  - platform: template
    id: oscv_state
    internal: ${hide_debug}
    accuracy_decimals: 0
    filters:
     - lambda: |-
        std::string mode[7]={"Off","Auto","Very High","High","Medium","Low","Very Low"};
        int state = ((int)x & 0x0F);
        if(id(swing_vertical).active_index() != state){
          auto call = id(swing_vertical).make_call();
          call.set_option(mode[state]);
          call.perform();
        }
        return state;

  - platform: template
    id: osch_state
    internal: ${hide_debug}
    accuracy_decimals: 0
    filters:
     - lambda: |-
        int state = ((int)x & 0xF0);
        return state;

  - platform: template
    id: volume_state
    internal: ${hide_debug}
    accuracy_decimals: 0
    filters:
     - lambda: return x;

  - platform: template
    id: unit_state
    internal: ${hide_debug}
    filters:
     - lambda: |-
        if(x == 0 || x == 128) x = 4;
        if(x == 204) x = 200;
        if(x == 140) x = 136;
        return x;

  - platform: template
    id: ctemp_state
    internal: ${hide_debug}
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    filters:
      - lambda: |-
          if(x < 0) x=0;
          if(id(temperature_consigne).state != (x+16)){
            id(temperature_consigne).publish_state(x+16);
          }
          return x;

  - platform: template
    name: "Ambient Temp"
    id: internal_temp
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value: 
      - script.execute:
          id: set_temp_regulation

  - platform: template
    id: tsidle
    internal: ${hide_debug}
    accuracy_decimals: 0


number:
  - platform: template  
    name: "Temperature Consigne"
    id: temperature_consigne
    internal: ${hide_debug}
    icon: mdi:thermometer
    optimistic: true
    min_value: 16
    max_value: 31
    restore_value: false
    step: 1
    on_value:
      - lambda: |-
          id(ctemp_state).publish_state(x-16);

  - platform: template  
    name: "Thermostat - Heat hysteresys low"
    id: heat_hyst_lo
    internal: ${hide_hyst}
    icon: mdi:thermometer
    optimistic: true
    min_value: -6
    max_value: 6
    initial_value: 1
    unit_of_measurement: °C
    restore_value: false
    step: 0.5
    on_value: 
      - lambda: |-
          id(esp_thermostat).set_heat_deadband(x);

  - platform: template  
    name: "Thermostat - Heat hysteresys high"
    id: heat_hyst_hi
    internal: ${hide_hyst}
    icon: mdi:thermometer
    optimistic: true
    min_value: -6
    max_value: 6
    initial_value: 1
    unit_of_measurement: °C
    restore_value: false
    step: 0.5
    on_value: 
      - lambda: |-
          id(esp_thermostat).set_heat_overrun(x);

  - platform: template  
    name: "Thermostat - Cool hysteresys low"
    id: cool_hyst_lo
    internal: ${hide_hyst}
    icon: mdi:thermometer
    optimistic: true
    min_value: -6
    max_value: 6
    initial_value: 1
    unit_of_measurement: °C
    restore_value: false
    step: 0.5
    on_value: 
      - lambda: |-
          id(esp_thermostat).set_cool_deadband(x);

  - platform: template  
    name: "Thermostat - Cool hysteresys high"
    id: cool_hyst_hi
    internal: ${hide_hyst}
    icon: mdi:thermometer
    optimistic: true
    min_value: -6
    max_value: 6
    initial_value: 1
    unit_of_measurement: °C
    restore_value: false
    step: 0.5
    on_value: 
      - lambda: |-
          id(esp_thermostat).set_cool_overrun(x);

  - platform: template  
    name: "Fan on idle timer"
    id: fanidletimer
    icon: mdi:thermometer
    optimistic: true
    min_value: 0
    max_value: 2400
    initial_value: 300
    unit_of_measurement: s
    restore_value: true
    step: 10
    
  - platform: template  
    id: dsync
    internal: ${hide_debug}
    initial_value: 0
    restore_value: false
    min_value: 0
    max_value: 1
    step: 1
    optimistic: true

binary_sensor:
  - platform: status
    name: "Status"

switch:
  - platform: gpio
    pin:
      number: GPIO2
      mode: output
    id: LED
    on_turn_on: 
      then:
        - delay: 100ms
        - switch.turn_off: LED 

  - platform: template
    id: apply
    internal: ${hide_debug}
    name: "Update"
    icon: mdi:check-decagram
    optimistic: True
    turn_on_action:
      - lambda: |-
          id(writecommand).publish_state(0);
  
  - platform: template
    id: forcesync
    name: "Resync with unit"
    icon: mdi:check-decagram
    optimistic: True
    turn_on_action:
      - lambda: |-
          id(dsync).publish_state(0);

  - platform: template
    id: screen_sw
    name: "Display"
    optimistic: True
    restore_mode: ALWAYS_OFF
    icon: mdi:fit-to-screen
    turn_on_action:
      - lambda: |-
          int state = id(unit_state).state;
          state = state | (1 << 3) | (1 << 7);
          id(unit_state).publish_state(state);
      - switch.turn_on: apply
    turn_off_action:
      - lambda: |-
          int state = id(unit_state).state;
          state = state & ~(1 << 3) & ~(1 << 7);
          id(unit_state).publish_state(state);
      - switch.turn_on: apply

  - platform: template
    id: mute
    name: "Mute"
    icon: mdi:volume-off
    restore_mode: ALWAYS_ON
    optimistic: True
    turn_on_action:
      - lambda: |-
          id(volume_state).publish_state(1);
      - switch.turn_on: apply
    turn_off_action:
      - lambda: |-
          id(volume_state).publish_state(0);
      - switch.turn_on: apply

  - platform: template
    id: clean_sw
    name: "Clean / ionizer"
    icon: mdi:leaf
    optimistic: True
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - lambda: |-
          int state = id(unit_state).state;
          state = state | (1 << 2) | (1 << 6);
          id(unit_state).publish_state(state);
      - switch.turn_on: apply
    turn_off_action:
      - lambda: |-
          int state = id(unit_state).state;
          state = state & ~(1 << 2) & ~(1 << 6);
          id(unit_state).publish_state(state);
      - switch.turn_on: apply

  # - platform: template
  #   id: swing_vertical
  #   name: "Swing vertical"
  #   optimistic: True
  #   turn_on_action:
  #      - lambda: |-
  #         id(oscv_state).publish_state(1);
  #   turn_off_action:
  #      - lambda: |-
  #         id(oscv_state).publish_state(0);

  - platform: template
    id: swing_horizontal
    internal: ${hide_debug} #cant test, mine is manual fins 
    name: "Swing horizontal"
    icon: mdi:tailwind
    optimistic: True
    turn_on_action:
      - lambda: |-
          id(osch_state).publish_state(16);
    turn_off_action:
      - lambda: |-
          id(osch_state).publish_state(0);

  - platform: restart
    name: "Restart"

select:
  - platform: template
    name: "Mode AC"
    id: ac_mode_consigne
    internal: ${hide_debug}
    icon: mdi:air-conditioner
    options:
      - "Auto"
      - "Cool"
      - "Dry"
      - "Fan Only"
      - "Heat"
      - "Off"
    optimistic: True
    on_value:
      - lambda: |-
          auto index = id(ac_mode_consigne).active_index();
          int data = index.value();
          if(index !=5){
            data |= (1 << 3);
          }        
          id(ac_state).publish_state(data);

  - platform: template
    name: "Fan Speed"
    id: fan_speed_consigne
    icon: mdi:fan
    options:
      - "No step"
      - "Very low"
      - "Low"
      - "Medium"
      - "High"
      - "Very high"
      - "Hum based"
      - "Turbo"
    optimistic: True
    on_value:
      - lambda: |-
          auto index = id(fan_speed_consigne).active_index();
          int data = index.value()*16;
          id(fan_state).publish_state(data);
      - switch.turn_on: apply

  - platform: template
    id: swing_vertical
    icon: mdi:tailwind
    name: "Swing position"
    optimistic: True
    options:
      - "Off"
      - "Auto"
      - "Very High"
      - "High"
      - "Medium"
      - "Low"
      - "Very Low"
    on_value:
      - lambda: |-
           auto index = id(swing_vertical).active_index();
           int data = index.value();
           id(oscv_state).publish_state(data);
      - switch.turn_on: apply
